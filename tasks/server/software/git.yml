---
# Webserver to replace calling GitHub for projects.
# https://www.howtoforge.com/how-to-install-http-git-server-with-nginx-on-debian-11/

## Variables ##

- name: Server | Software | Git | Check Config Variables
  debug: 
    var: "{{ item }}"
  loop:
    - git_name
    - git_branch
    - git_url
    - git_sep

- name: Server | Software | Git | Split Config Variables To Array
  set_fact:
    git_names: "{{ git_name.split(git_sep) }}"
    git_branches: "{{ git_branch.split(git_sep) }}"
    git_urls: "{{ git_url.split(git_sep) }}"
    git_projects: []

- name: Server | Software | Git | Build Dictionary
  set_fact:
    git_projects: "{{ git_projects + [{ 'name': git_names[item], 'branch': git_branches[item], 'url': git_urls[item]  }] }}"
  loop: "{{ range(0, git_name|length) | list }}"

- name: Server | Software | Git | Display Dictionary
  debug: 
    var: git_projects

- name: Server | Software | Git | Variables 1
  set_fact: 
    git_web_root: /var/www/html/git
    git_config_file: /etc/nginx/conf.d/git.conf


## Pre-reqs ##

- name: Server | Software | Git | Install
  package: 
    name:
      - nginx
      - git
      - fcgiwrap
      - apache2-utils
      - unzip
    state: present
  when: ansible_pkg_mgr == "apt"


## Repositories ##

- name: Server | Software | Git | Delete
  file:
    path: "{{ git_web_root }}"
    state: absent
    recurse: yes

- name: Server | Software | Git | Download
  git: 
    repo: "{{ item.url }}"
    dest: "{{ git_web_root }}/{{ item.name }}.git"
    branch: "{{ item.branch }}"
    clone: yes
    force: yes
  #ignore_errors: yes
  loop: "{{ git_projects }}"

- name: Server | Software | Git | Permissions
  file:
    path: "{{ git_web_root }}/{{ item.name }}.git"
    state: directory
    mode: '755'
    owner: www-data
    group: www-data
    recurse: yes
  loop: "{{ git_projects }}"


## NGINX ##

- name: Server | Software | Git | Index
  blockinfile:
    path: "{{ git_web_root }}/index.html"
    block: |
      {{ item.name }}.git is cloned from {{ item.url }} using branch {{ item.branch }}.
    state: present
    mode: '755'
    create: yes
    backup: yes
    marker: "<!-- {mark} {{ item.name }} -->"
  loop: "{{ git_projects }}"

- name: Server | Software | Git | Config
  blockinfile:
    path: "{{ git_config_file }}"
    block: |
      server {
        listen 80;
      
        root {{ git_web_root }};
      
        # Add index.php to the list if you are using PHP
        index index.html;
        #autoindex on;
      
        server_name {{ ansible_hostname }}.{{ domain }};
      
        location / {
          # First attempt to serve request as file, then
          # as directory, then fall back to displaying a 404.
          try_files $uri $uri/ =404;
        }
      
        location ~ (/.*) {
          client_max_body_size 0;
          #auth_basic "Hyperling's Git Login";
          #auth_basic_user_file "{{ git_web_root }}/htpasswd";
          include /etc/nginx/fastcgi_params;
          fastcgi_param SCRIPT_FILENAME /usr/lib/git-core/git-http-backend;
          fastcgi_param GIT_HTTP_EXPORT_ALL "";
          fastcgi_param GIT_PROJECT_ROOT {{ git_web_root }};
          fastcgi_param REMOTE_USER $remote_user;
          fastcgi_param PATH_INFO $1;
          fastcgi_pass unix:/var/run/fcgiwrap.socket;
        }
      }
    state: present
    mode: '755'
    create: yes
    backup: yes
    marker: "# {mark} Managed By Ansible Git Server Playbook -->"
    
- name: Server | Software | Git | Service
  service:
    name: nginx
    pattern: nginx
    enabed: yes
    status: restarted


## Cron ##

- name: Server | Software | Git | Cron | Hourly
  ansible.builtin.cron:
    name: "{{ item.name }} hourly"
    special_time: hourly
    job: "cd {{ git_web_root }}/{{ item.name }}.git && git pull --rebase"
  loop: "{{ git_projects }}"

- name: Server | Software | Git | Cron | Reboot
  ansible.builtin.cron:
    name: "{{ item.name }} reboot"
    special_time: reboot
    job: "cd {{ git_web_root }}/{{ item.name }}.git && git pull --rebase"
  loop: "{{ git_projects }}"
